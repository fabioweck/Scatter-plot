using ScatterGraph.Properties;
using System.Drawing.Drawing2D;
using System.Windows.Forms;

namespace ScatterGraph
{
    public partial class Form1 : Form
    {
        public Graph graph = new Graph();   //Initializes a new graph component
        public Plot MyPlot;                 //Used for creating custom plots to be added to the graph

        public Form1()
        {
            InitializeComponent();

            this.StartPosition = FormStartPosition.CenterScreen; //Starts the program at the center of the screen

            pnlGraph.Controls.Add(graph);           //Adds the component to the main panel

            Image reloadBtn = Resources.reload;     //Courtesy image for the reload button
            btnReloadData.BackgroundImage = new Bitmap(reloadBtn, new Size(30, 30));

            //Set of tooltips for the buttons 
            toolTip.SetToolTip(btnReloadData, "Reloads the graph with new random data");
            toolTip.SetToolTip(btnIncreaseSize, "Increases the plot size by 2 pixels");
            toolTip.SetToolTip(btnDecreaseSize, "Decreases the plot size by 2 pixels");
            toolTip.SetToolTip(btnRemovePlot, "Removes the last custom plot inserted");
        }

        //Method to alter the size of the plots on the graph
        private void ChangePlotSize(object sender, EventArgs e)
        {
            Button button = (Button)sender; //Casts to button

            switch (button.Name)            //Gets the button name to select the case
            {
                case "btnIncreaseSize":
                    graph.IncreasePlotSize(2);  //Calls the method to increase the plot size
                    graph.Refresh();            //Refreshes the graph to draw again with bigger plots
                    break;
                case "btnDecreaseSize":
                    graph.DecreasePlotSize(2);  //Calls the method to decrease the plot size
                    graph.Refresh();            //Refreshes the graph to draw again with smaller plots
                    break;
            }
        }

        //Method to add or remove custom plots
        private void btnCustomPlot(object sender, EventArgs e)
        {
            Button button = (Button)sender;                 //Casts to button
            SolidBrush brush = new SolidBrush(Color.Blue);  //Defines the color of the custom plot

            if (button.Name == "btnAddPlot")                //Gets the button name to select the case
            {
                int age = (int)numAgeSelected.Value;            //Casts value to integer (age number)
                double hours = (double)numHoursSelected.Value;  //Casts value to double (hours number)

                if (age <= 90 && age >= 0)
                {
                    if (hours <= 12 && hours > 0)
                    {
                        MyPlot = new(age, hours, brush);        //Defines the new plot to be added
                        graph.AddPlot(MyPlot);                  //Calls the method to add the plot
                        graph.Refresh();                        //Refreshes the graph to draw again with the new custom plot
                    }
                    else
                    {
                        MessageBox.Show("Enter hours between 1 and 12", "Invalid entry", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                    }
                }
                else
                {
                    MessageBox.Show("Enter an age between 0 and 90", "Invalid entry", MessageBoxButtons.OK, MessageBoxIcon.Exclamation);
                }
            }
            else if (button.Name == "btnRemovePlot")
            {
                graph.RemovePlot();                             //Removes the last custom plot inserted
                graph.Refresh();                                //Refreshes the graph to draw again without the last custom plot
            }
        }

        //Method to reload the graph creating a new random collection of data
        private void btnReloadData_Click(object sender, EventArgs e)
        {
            graph.PopulatePlots();
            graph.Refresh();
        }

        //Method to open 'About' message box
        private void aboutToolStripMenuItem_Click(object sender, EventArgs e)
        {
            string message = "Disclaimer : all data displayed in this application are randomly generated by functions and do not reflect reality.\n\nFabio Augusto Weck - 441977\nAssignment 02 - Graphs";
            MessageBox.Show(message, "About", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }

        //Closes the program
        private void closeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            Application.Exit();
        }
    }
}